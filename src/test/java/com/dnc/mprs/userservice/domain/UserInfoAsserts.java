package com.dnc.mprs.userservice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserInfoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserInfoAllPropertiesEquals(UserInfo expected, UserInfo actual) {
        assertUserInfoAutoGeneratedPropertiesEquals(expected, actual);
        assertUserInfoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserInfoAllUpdatablePropertiesEquals(UserInfo expected, UserInfo actual) {
        assertUserInfoUpdatableFieldsEquals(expected, actual);
        assertUserInfoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserInfoAutoGeneratedPropertiesEquals(UserInfo expected, UserInfo actual) {
        assertThat(expected)
            .as("Verify UserInfo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserInfoUpdatableFieldsEquals(UserInfo expected, UserInfo actual) {
        assertThat(expected)
            .as("Verify UserInfo relevant properties")
            .satisfies(e -> assertThat(e.getUserId()).as("check userId").isEqualTo(actual.getUserId()))
            .satisfies(e -> assertThat(e.getFirstname()).as("check firstname").isEqualTo(actual.getFirstname()))
            .satisfies(e -> assertThat(e.getLastname()).as("check lastname").isEqualTo(actual.getLastname()))
            .satisfies(e -> assertThat(e.getAlias()).as("check alias").isEqualTo(actual.getAlias()))
            .satisfies(e -> assertThat(e.getGender()).as("check gender").isEqualTo(actual.getGender()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()))
            .satisfies(e -> assertThat(e.getAddressLine1()).as("check addressLine1").isEqualTo(actual.getAddressLine1()))
            .satisfies(e -> assertThat(e.getAddressLine2()).as("check addressLine2").isEqualTo(actual.getAddressLine2()))
            .satisfies(e -> assertThat(e.getCity()).as("check city").isEqualTo(actual.getCity()))
            .satisfies(e -> assertThat(e.getCountry()).as("check country").isEqualTo(actual.getCountry()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserInfoUpdatableRelationshipsEquals(UserInfo expected, UserInfo actual) {
        // empty method
    }
}
